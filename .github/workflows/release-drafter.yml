name: Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Read version from VERSION file
        id: version
        run: |
          VERSION=$(cat VERSION | tr -d '\n\r ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"

      # Build packages using Docker
      - name: Build packages
        run: |
          # Create .env.defaults file that the run script expects
          if [ ! -f .env.defaults ]; then
            echo "# Default environment variables for CI builds" > .env.defaults
            echo "# This file provides fallback values when .env doesn't exist" >> .env.defaults
          fi

          # Ensure we have a minimal .env file to prevent docker-compose warnings
          if [ ! -f .env ]; then
            echo "# Environment file for GitHub Actions" > .env
            echo "# Minimal file to prevent docker-compose warnings" >> .env
          fi

          # Use the run script's package build function
          ./run package:deb:docker

      - name: Collect built packages
        run: |
          mkdir -p packages
          # Find .deb files in current and parent directory (dpkg-buildpackage creates them in parent)
          find . .. -maxdepth 1 -name "*.deb" -exec cp {} packages/ \; 2>/dev/null || true
          ls -la packages/
          echo "Found packages:"
          ls -1 packages/*.deb 2>/dev/null || echo "No packages found"

      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@v6
        id: release_drafter
        with:
          version: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload packages to the draft release
      - name: Upload packages to release
        if: steps.release_drafter.outputs.upload_url
        run: |
          for deb_file in packages/*.deb; do
            if [ -f "$deb_file" ]; then
              filename=$(basename "$deb_file")
              echo "Uploading $filename..."
              curl -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Content-Type: application/vnd.debian.binary-package" \
                   --data-binary @"$deb_file" \
                   "${{ steps.release_drafter.outputs.upload_url }}?name=$filename"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
