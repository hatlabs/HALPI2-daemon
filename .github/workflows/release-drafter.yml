name: Release Drafter

on:
  workflow_run:
    workflows: ["build"]
    types:
      - completed
    branches:
      - main

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    # Only run if the build workflow succeeded
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/checkout@v5

      - name: Read version from VERSION file
        id: version
        run: |
          VERSION=$(cat VERSION | tr -d '\n\r ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"

      # Download packages built by the build workflow
      - name: Download packages from build workflow
        uses: actions/download-artifact@v4
        with:
          name: debian-packages-${{ steps.version.outputs.version }}
          path: packages/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: List downloaded packages
        run: |
          echo "Downloaded packages:"
          ls -la packages/ || echo "packages/ directory not found"
          find packages/ -name "*.deb" -ls 2>/dev/null || echo "No .deb files found"
          echo "Package count: $(find packages/ -name "*.deb" 2>/dev/null | wc -l)"

      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@v6
        id: release_drafter
        with:
          version: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debug release drafter outputs
      - name: Debug release drafter outputs
        run: |
          echo "Release ID: ${{ steps.release_drafter.outputs.id }}"
          echo "Upload URL: ${{ steps.release_drafter.outputs.upload_url }}"
          echo "HTML URL: ${{ steps.release_drafter.outputs.html_url }}"

      # Upload packages to the draft release
      - name: Upload packages to release
        if: steps.release_drafter.outputs.upload_url
        run: |
          echo "Starting package upload process..."
          upload_url_template="${{ steps.release_drafter.outputs.upload_url }}"
          echo "Upload URL template: $upload_url_template"

          package_count=0
          for deb_file in packages/*.deb; do
            if [ -f "$deb_file" ]; then
              filename=$(basename "$deb_file")
              filesize=$(stat -c%s "$deb_file")
              echo "Uploading $filename (${filesize} bytes)..."

              # Replace the URL template properly
              upload_url="${upload_url_template%\{*\}}?name=${filename}"
              echo "Final upload URL: $upload_url"

              response=$(curl -w "%{http_code}" -s -o /tmp/upload_response.json \
                   -X POST \
                   -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Content-Type: application/octet-stream" \
                   --data-binary @"$deb_file" \
                   "$upload_url")

              echo "HTTP response code: $response"
              if [ "$response" -ge 200 ] && [ "$response" -lt 300 ]; then
                echo "✅ Successfully uploaded $filename"
                package_count=$((package_count + 1))
              else
                echo "❌ Failed to upload $filename"
                echo "Response body:"
                cat /tmp/upload_response.json || echo "No response body"
              fi
            fi
          done

          echo "Upload summary: $package_count packages uploaded"
          if [ $package_count -eq 0 ]; then
            echo "❌ No packages were uploaded successfully"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
